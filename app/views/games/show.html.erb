<div class="row">
	<div class="col s6 offset-s3 center">
		<h3><%= @game.name %></h3>
	</div> 
</div>
<div class="row board-upper">

	<!-- player 1 -->
	<div class="col s2 offset-s2 gallow">
		<%= image_tag 'hangman/hangmanL', :class => 'responsive-img',:style => 'vertical-align: middle;' %>
	</div>
	<!-- Center -->
	<div class="col s4">

		<!-- Test Button -->
		<div class="row center">
			<div class="col s12">
			<button id="test-turn" data-letter="a" class="btn">Test Turn</button>
			</div>
		</div>

		<!-- Letters -->
		<div class="row center">
			<div class="col s12">
				<div class="letter" data-letter="a"><p>A</p></div>
				<div class="letter" data-letter="b"><p>B</p></div>
				<div class="letter" data-letter="c"><p>C</p></div>
				<div class="letter" data-letter="d"><p>D</p></div>
				<div class="letter" data-letter="e"><p>E</p></div>
				<div class="letter" data-letter="f"><p>F</p></div>
				<div class="letter" data-letter="g"><p>G</p></div>
			</div>
		</div>
		<div class="row short center">
			<div class="col s12">
				<div class="letter" data-letter="h"><p>H</p></div>
				<div class="letter" data-letter="i"><p>I</p></div>
				<div class="letter" data-letter="j"><p>J</p></div>
				<div class="letter" data-letter="k"><p>K</p></div>
				<div class="letter" data-letter="l"><p>L</p></div>
				<div class="letter" data-letter="m"><p>M</p></div>
			</div>
		</div>
		<div class="row">
			<div class="col s12 center">
				<div class="letter" data-letter="n"><p>N</p></div>
				<div class="letter" data-letter="o"><p>O</p></div>
				<div class="letter" data-letter="p"><p>P</p></div>
				<div class="letter" data-letter="q"><p>Q</p></div>
				<div class="letter" data-letter="r"><p>R</p></div>
				<div class="letter" data-letter="s"><p>S</p></div>
				<div class="letter" data-letter="t"><p>T</p></div>
			</div>
		</div>
		<div class="row short center">
			<div class="col s12">
				<div class="letter" data-letter="u"><p>U</p></div>
				<div class="letter" data-letter="v"><p>V</p></div>
				<div class="letter" data-letter="w"><p>W</p></div>
				<div class="letter" data-letter="x"><p>X</p></div>
				<div class="letter" data-letter="y"><p>Y</p></div>
				<div class="letter" data-letter="z"><p>Z</p></div>
			</div>
		</div>

		<!-- Word -->
		


	</div>

	<!-- player 2 -->
	<div class="col s2 gallow">
		<%= image_tag 'hangman/hangman', :class => 'responsive-img',:style => 'vertical-align: middle;' %>
	</div>

</div>
<div class="row board-lower board-lower">
	<div class="col s4 offset-s4 center word">
		<div class="row">
			<h4 class="white-text">Word to Solve</h4>
		</div>
	</div>

</div>



<script type="text/javascript">
	$(document).ready(function () {
		//As soon as the page starts
		get_game();
		//begin grabbing the game state every 30 seconds
		var game_state = setInterval(function() { get_game() }, 5000);

		/**
		 * Get the correct or incorrect letters
		 * @param  bool is to toggle between correct/incorrect array
		 * @return Array
		 */
		function getLetters(bool){
			if(bool){
				return JSON.parse(localStorage.getItem('CSE3901_correct_letters') || "[]");
			} else {
				return JSON.parse(localStorage.getItem('CSE3901_incorrect_letters') || "[]");
			}
		}

		/**
		 * This sets the correct/incorrect letter arrays
		 * @param boolean bool  toggle between correct/incorrect
		 * @param object array the object we are setting in storage
		 */
		function setLetters(bool, array) {
			if(bool){
				localStorage.setItem('CSE3901_correct_letters', JSON.stringify(array));
			} else {
				localStorage.setItem('CSE3901_incorrect_letters', JSON.stringify(array));
			}
		}

		/**
		 * Set the game state in storage
		 * @param JSON game object
		 */
		function setGameStorage (game) {
			localStorage.setItem('CSE3901_game', JSON.stringify(game));
		}

		/**
		 * Get the game object
		 * @return JSON game object
		 */
		function getGameStorage (){
			return JSON.parse(localStorage.getItem('CSE3901_game')) || {};
		}

		/**
		 * Add a letter to either correct or incorrect array
		 * @param letter String
		 * @param bool 	boolean to toggle between correct and incorrect
		 */
		function addLetter(bool, letter){
			var letters = getLetters(bool);
			if(bool){
				//put it in correct array
				letters.push(letter);
				setLetters(true, letters);
				console.log('correct letter!')
				console.log(getLetters(bool));
			} else {
				//put it in incorrect array
				letters.push(letter);
				setLetters(false, letters);
				console.log('incorrect letter!!');
				console.log(getLetters(bool));
			}
		}

		/**
		 * Grab the current game word.
		 * @return String
		 */
		function getWord() {
			return JSON.parse(localStorage.getItem('CSE3901_game')).word || "";
		}

		/**
		 * Checks if user has won or lost
		 * @return integer: 1 => win, 0 => loss, 2 => neither 
		 */
		function checkWinLoss () {
			var target_word = getWord();
			var correct_letters = getLetters(true);
			var incorrect_letters = getLetters(false);

			if(correct_letters.length == target_word.length){
				return 1;
			} else if(incorrect_letters.length >= 5) {
				return 0;
			} else {
				return 2;
			}
		}

		/**
		 * Check if the letter is in the word to be guessed
		 * and if they won/lost neither
		 * @return boolean
		 */
		function handleLetter(letter) {
			var word = getWord();
			var count = 0;
			for(var i = 0; i < word.length; i++){
				if(word[i] == letter){
					count++;
				}
			}
			if(count == 0) {
			   	addLetter(false, letter);
			} else {
				for(var i = 0; i < count; i++){
					addLetter(true, letter);
				}
			}

			var game_status = checkWinLoss();

			send_data(game_status);
		}

		/**
		 * This method handles a letter click.
		 */
		$('.letter, #test-turn').click(function () {
			var letter = $(this).data('letter');
			handleLetter(letter);
		});

		/**
		 * This method gets the game state.
		 * @return data
		 */
		function get_game(){
			$.ajax({
				type:'GET',
				url: 'http://localhost:3000/run-game',
				data: {
					id: <%= @game.id %>
				},
				dataType: 'JSON',
				success: function (data){
					console.log('in get data return');
					console.log(data);
					setGameStorage(data);
					//if current user is first user and it is their turn
					if(<%= current_user.id %> == data.first_user_id && data.turn == 0){
						//unlock the board
						switch_turn(true);
					} else if(<%= current_user.id %> == data.second_user_id && data.turn == 1) {
						//if current user is second user and it is their turn
						//unlock the board
						switch_turn(true);
					} else if (data.game_over) {
						stopGame();
					} else if (<%= current_user.id %> == data.first_user_id && data.turn == 1) {
						switch_turn(false);
					} else if(<%= current_user.id %> == data.second_user_id && data.turn == 0) {
						switch_turn(false);
					}
				},
				error: function (err) {
					console.log(err);
				}
			})
		}

		/**
		 * Send data back as post to server
		 * @param  game status
		 * @return nothing
		 */
		function send_data (game_status) {
			var game = getGameStorage();
			var correct_letters = getLetters(true);
			var incorrect_letters = getLetters(false);
			if (game.first_user_id == <%= @current_user.id %>) {
				//check if the first user just won or lost
				if(game_status == 1){
					game.game_over = true;
					game.winner = <%= @current_user.id %>;
					game.first_user_misses = incorrect_letters.length;
					setGameStorage(post(game));
					stopGame();
				} else if(game_status == 0) {
					game.game_over = true;
					game.winner = game.second_user_id;
					game.first_user_misses = incorrect_letters.length;
					setGameStorage(post(game));
					stopGame();
				} else {
					switch_turn(false);
					setGameStorage(post(game));
				}
			} else {
				//check if hte second user just won or lost
				if(game_status == 1){
					game.game_over = true;
					game.winner = <%= @current_user.id %>;
					game.second_user_misses = incorrect_letters.length;
					setGameStorage(post(game));
					stopGame();
				} else if(game_status == 0) {
					game.game_over = true;
					game.winner = game.first_user_id;
					game.second_user_misses = incorrect_letters.length;
					setGameStorage(post(game));
					stopGame();
				} else {
					switch_turn(false);
					setGameStorage(post(game));
				}
			}
		}

		/**
		 * This method sends a post back to the server.
		 * @param  the game object
		 */
		function post (data) {
			$.ajax({
				type:'POST',
				url: 'http://localhost:3000/run-game',
				data: data,
				dataType: 'JSON',
				success: function (data){
					console.log('post return data...');
					console.log(data);
					return data;
				},
				error: function (err) {
					console.log(err);
				}
			});
		}

		/**
		 * This method stops the update game method
		 */
		function stopGame () {
			console.log('stopping the game :)');
			clearInterval(game_state);
			setGameStorage({});
			setLetters(true, []);
			setLetters(false, []);
			$('.letter, #test-turn').hide();
			//display game over message
		}

		function switch_turn (check) {
			if(check){
				console.log('UNDISABLING THE BUTTON');
				$('.letter, #test-turn').show();
			} else {
				console.log('DISABLING THE BUTTON');
				$('.letter, #test-turn').hide();
			}
		}
	});
</script>